<?php

/**
 * ProcessWire
 * Copyright (C) 2014-present by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 *
 * TODO
 * ----
 * Add caching to help circumvent hitting hosting service API rate limits
 * Add support for Gitlab hosted repositories via repo-host abstraction
 * Add support for BitBucket hosted repositories via repo-host abstraction
 * Move support for GitHub into repo-host abstraction
 * Add public data-access API for other modules to use
 *
 * Known Issues
 * ------------
 *
 */

class ModuleReleaseNotes extends Process implements ConfigurableModule {


    protected $github_remaining_reads = 60;


    public static function getModuleInfo() {
        return [
            'title'     => __('Module Release Notes'),
            'summary'   => __("Discovers and shows what has changed with each module version."),
            'version'   => '0.5.0',
            'author'    => 'S Dickinson (netcarver)',
            'autoload'  => 'template=admin',
            'singular'  => true,
            'permanent' => false,
            'requires'  => 'ProcessWire>=3.0.0, PHP>=5.4.0, TextformatterParsedownExtraPlugin>=1.0.0',
            'installs'  => 'TextformatterParsedownExtraPlugin',
            'icon'      => 'code-fork',
        ];
    }


    /**
     *
     */
    static public function getDefaultConfig() {
        return [
            'fallbackCommitHistory' => 12,
            'openSettings'          => 0,
            'wordWrapColumn'        => 95,
            'breakingPhrases'       => 'BreakingChange, Breaking Change, Breaking-Change',
        ];
    }


    /**
     * Lists mappings of file extensions to markup language and preferred textformatter to be used.
     *
     * Anything not matching the list here (or if the formatter fails to be loaded) will be escaped and output
     * 'verbatim'.
     */
    static $formatters = [
        'md' => ['type' => 'Markdown', 'use' => 'TextformatterParsedownExtraPlugin'],
    ];


    /**
     * Make config data available within the instance variable.
     */
    public function __construct() {
        foreach(self::getDefaultConfig() as $key => $value) {
            $this->$key = $value;
        }
    }


    /**
     * Prepares commit meta-data for display
     */
    public function formatCommitMetaData($commit, $info) {
        $author    = $commit['commit']['author']['name'];
        $committer = $commit['commit']['committer']['name'];
        $date      = $commit['commit']['committer']['date'];
        $sha       = substr($commit['sha'], 0, 8);
        $diff_url  = $commit['html_url'];
        $icon      = $info['repo_icon'];

        $date  = str_replace('T', ' ', $date);
        $sig   = "$icon &mdash; $date &mdash; <a href='$diff_url' target='_diff'>$sha <i class='fa fa-icon fa-external-link'></i></a> &mdash; $author";

        return $sig;
    }




    /**
     * Get githubs ReleaseNotes entry for the given module.
     *
     * As far as I know, this is only applicable to repos hosted at Github.
     * TODO rework to operate in the same manner as the other getters.
     */
    public function getReleaseNotes($info, &$http) {
        // TODO add caching (stop us from hitting API request limits
        // Look for release notes
        $remote = $info['project_url'];
        $api_remote = str_replace('https://github.com/', 'https://api.github.com/repos/', $remote);
        $url = "$api_remote/releases/tags/{$info['module_version']}";
        $result = $http->getJSON($url);
        $this->recordRemainingReads($http);
        return $result;
    }


    /**
     * Sanitise a string for further processing and display.
     *
     * If you are going to be passing the string to a ML like Markdown or Textile, you might want to do an entity_decode
     * first to cause HTML entities to be mapped to utf-8 characters where possible. This will allow for text with
     * diacritics/non ASCII characters to appear as they should and not as embedded HTML Entities.
     *
     * TODO Perhaps use some JS to clean up these from code blocks in certain divs.
     */
    public function sanitizeString($string) {
        $san = wire('sanitizer');
        $string = $san->purify($string);
        return $string;
    }



    /**
     *
     */
    public function getTaggedLog($info, &$http, &$tagged_log) {
        // TODO add caching (stop us from hitting API request limits
        $remote = $info['project_url'];
        $api_remote = str_replace('https://github.com/', 'https://api.github.com/repos/', $remote);
        $url = "$api_remote/compare/{$info['module_version_current']}...{$info['module_version']}";
        $tmp_result = $http->getJSON($url);
        $this->recordRemainingReads($http);
        $code = $http->getHttpCode();
        if(200 == $code && !empty($tmp_result['commits'])) {
            $history = [];
            $commits = $tmp_result['commits'];
            foreach ($commits as $commit) {
                $message   = $this->sanitizeString($commit['commit']['message']);
                $message   = $this->utf8_wordwrap($message);
                $sig       = $this->formatCommitMetaData($commit, $info);
                $entry     = "<li class='commit'><span class='sig'>$sig</span><br><pre>$message</pre></li>";
                $history[] = $entry;
            }
            $history   = implode("", $history);
            $diff_url  = $tmp_result['html_url'];
            $diff_link = "(<a href='$diff_url' target='_diff'>View diff. {$info['remote_icon']}</i></a>)";
            $tagged_log = "<ul class='commits'>$history</ul><p><a href='$diff_url' target='_diff'>{$info['repo_icon']} View Entire Diff.</a></p>";
        }
    }



    /**
     * Get the changelog file for the given module.
     *
     * Currently only knows about Github.
     */
    public function getChangelog($info, &$http, &$changelog) {
        $remote = $info['project_url'];
        $raw_remote = str_replace('https://github.com/', 'https://raw.githubusercontent.com/', $remote);
        $url = "$raw_remote/master/CHANGELOG.md";
        $result = $http->get($url);
        $this->recordRemainingReads($http);
        if(200 == $http->getHttpCode()) {
            $changelog = $result;
        }
    }



    /**
     * Examine the remote URL to determine the hosting service and icon to use.
     */
    public function remoteHostInfo($remote) {
        if (false !== stripos($remote, '://github.com')) {
            return [
                'host' => 'Github',
                'link' => $remote,
                'icon' => '<i class="fa fa-icon fa-github"></i>',
            ];
        } else if (false !== stripos($remote, '://bitbucket.org')) {
            return [
                'host' => 'BitBucket',
                'link' => $remote,
                'icon' => '<i class="fa fa-icon fa-bitbucket"></i>'
            ];
        } else if (false !== stripos($remote, '://gitlab.com')) {
            return [
                'host' => 'GitLab',
                'link' => $remote,
                'icon' => '<i class="fa fa-icon fa-gitlab"></i>'
            ];
        }

        // Use a generic git icon...
        return [
            'host' => 'Unknown',
            'link' => $remote,
            'icon' => '<i class="fa fa-icon fa-git"></i>',
        ];
    }



    /**
     * Pulls the x-ratelimit headers from Github.
     */
    protected function recordRemainingReads($http) {
        $headers = $http->getResponseHeaders();
        if (isset($headers['x-ratelimit-remaining'])) {
            $this->github_remaining_reads = [
                'limit'     => $headers['x-ratelimit-limit'],
                'remaining' => $headers['x-ratelimit-remaining'],
                'reset'     => $headers['x-ratelimit-reset'],
            ];
        }
    }


    /**
     * Pulls the last N commits for the given module.
     *
     * Currently only knows about Github.
     */
    public function getLastCommits($info, &$http, &$latest_commits) {
        $remote = $info['project_url'];
        $api_remote = str_replace('https://github.com/', 'https://api.github.com/repos/', $remote);
        $url = "$api_remote/commits";
        $result = $http->getJSON($url);
        $this->recordRemainingReads($http);
        $code = $http->getHttpCode();
        if(200 == $code && !empty($result)) {
            $history = [];
            $commits = array_slice($result, 0, $this->data['fallbackCommitHistory']);
            foreach ($commits as $commit) {
                $message   = $this->sanitizeString($commit['commit']['message']);
                $message   = $this->utf8_wordwrap($message);
                $sig       = $this->formatCommitMetaData($commit, $info);
                $entry     = "<li class='commit'><span class='sig'>$sig</span><br><pre>$message</pre></li>";
                $history[] = $entry;
            }
            $history   = implode("", $history);
            $latest_commits = "<ul class='commits'>$history</ul>";
        }
    }


    /**
     * Add hooks to display release information to modules prior to upgrade and add the readme and changelog to module
     * information pages.
     */
    public function ready() {

        if (!$this->user->isLoggedin() || !$this->user->hasPermission('module-admin')) return;

        /**
         * Add Release notes and/or a list of commits between tags and/or the latest changelog and/or the latest
         * commit messages to the download confirmation form.
         */
        $this->addHookAfter("ProcessModule::buildDownloadConfirmForm", function($event) {
            $info            = $event->arguments[0];
            $module_class    = $info['class_name'];
            $current_info    = $this->modules->getModuleInfo($module_class);
            $current_version = $current_info['version'];
            $new_version     = $info['module_version'];
            $remote          = $info['project_url'];
            $remote_info     = $this->remoteHostInfo($remote);
            $repo_icon       = $remote_info['icon'];
            $remote_icon     = '<i class="fa fa-icon fa-external-link"></i>';
            $is_github_repo  = (false !== stripos($remote, '://github.com'));

            // Push the current version into the $info
            $info['version_current'] = $current_version;
            if (is_int($current_version)) {
                $current_version = $this->modules->formatVersion($current_version);
            }
            $info['module_version_current'] = $current_version;
            $info['repo_icon']   = $repo_icon;
            $info['remote_icon'] = $remote_icon;
            ksort($info);

            $changes         = $current_version != $new_version;

            $http = new WireHttp();
            $http->setHeader('User-Agent', 'netcarver-pw-module-version-checker');
            $http->setTimeout(2);

            $return_info     = $event->return;
            $children        = $return_info->children;


            $wrapper = $this->modules->get('InputfieldFieldset');
            $wrapper->name  = 'changes-wrapper';
            $wrapper->label = __("What's Changed?");

            $release_notes  = $release_notes_default  = __('Not Available - Github Release Not Found');
            $tagged_log     = $tagged_log_default     = __('Not Available - One or More Git Tags Missing');
            $changelog_file = $changelog_file_default = __('Not Available - File Missing');
            $latest_commits = $latest_commits_default = __('Comming Soon!');

            //
            // Fetch release notes (if any)...
            //
            // TODO Only show release notes for Github repos. BB and GL repos don't support them.
            //
            $tmp_release_notes = $this->getReleaseNotes($info, $http);
            $code = $http->getHttpCode();
            if(200 == $code && !empty($tmp_release_notes['body'])) {
                // TODO Handle non 200 return codes, or empty body!
                // TODO It is possible for the requests to be refused due to rate-limiting - this needs to be conveyed to the
                // user
                $release_notes = $this->formatTextOfType('md', $tmp_release_notes['body'], $fmt_note);
                $release_link  = "$remote/releases/tag/$new_version";
            }
            $has_release_notes = $release_notes != $release_notes_default;

            //
            // Fetch tagged log (if any)...
            //
            if ($changes) {
                $this->getTaggedLog($info, $http, $tagged_log);
            }
            $has_tagged_log = $tagged_log != $tagged_log_default;

            //
            // Fetch changelog file (if any)...
            //
            $this->getChangelog($info, $http, $changelog_file);
            $has_changelog_file = $changelog_file != $changelog_file_default;


            $field = $this->modules->get('InputfieldMarkup');
            $field->name = 'release-notes';
            if ($has_release_notes) {
                $field->label  = __("Official Release Notes for $new_version.");
                $release_notes = "<div class='release-notes'>$release_notes<p><a href='$release_link' target='_diff'>$repo_icon View</a><p></div>";
                if ($this->config->debug) $field->notes = $fmt_note;
            } else {
                $field->label = __("No Official Release Notes for $new_version.");
                $field->notes = __('To add official release notes, please ask the module author to start using the Github [Releases](https://help.github.com/articles/creating-releases/) feature. They will have to start [tagging](https://git-scm.com/book/en/v2/Git-Basics-Tagging) the code as they push new versions in order to use this feature.');
                if ($has_changelog_file || $has_tagged_log) {
                    $field->collapsed = Inputfield::collapsedYes;
                }
            }
            $field->value = $release_notes;
            $wrapper->add($field);

            if ($changes) {
                $field = $this->modules->get('InputfieldMarkup');
                $field->name = 'tagged-log';
                if ($has_tagged_log) {
                    $field->label = __("Detailed Commit History - from $current_version to $new_version");
                } else {
                    $field->label = __("No Detailed Commit History Available");
                    $field->notes = __('Even if the author doesn\'t use Github Releases (perhaps they are using Bitbucket or Gitlab), they can start to show code changes between versions if they start [tagging](https://git-scm.com/book/en/v2/Git-Basics-Tagging) each commit that increments the module version. The tags **must** match the version numbering scheme used by the module for this feature to work.');
                    if ($has_changelog_file) {
                        $field->collapsed = Inputfield::collapsedYes;
                    }
                }
                if ($has_release_notes) {
                    $field->collapsed = Inputfield::collapsedYes;
                }
                $field->value = "<div class='release-notes'>$tagged_log</div>";
                $wrapper->add($field);
            }

            if (!$has_release_notes || $has_changelog_file) {
                // If there are no release notes, or there is a changelog file, we show this field.
                $field = $this->modules->get('InputfieldMarkup');
                $field->name = 'changelog';
                if ($has_changelog_file) {
                    $field->label   = __("Changelog from version $new_version");
                    $changelog_file = $this->formatTextOfType('md', $changelog_file, $fmt_note);
                    $changelog_file = $this->insertMarkerForVersion($current_version, $changelog_file);
                    $changelog_file = $this->highlightChangelogBetweenVersions($changelog_file, $current_version, $new_version);
                    if ($this->config->debug) $field->notes = $fmt_note;
                    $changelog_file = "<div class='release-notes'>$changelog_file</div>";
                } else {
                    $field->label   = __("No Changelog from version $new_version");
                    $field->notes   = __('If the author does not want to tag versions or cut releases, then they could consider adding (and maintaining) a ```CHANGELOG``` file in the root of the module repository. If they do, it will show up here. If they already use the releases feature, or tag module versions, this is not necessary and can lead to duplicated effort.');
                }
                if ($has_release_notes || $has_tagged_log) {
                    $field->collapsed = Inputfield::collapsedYes;
                }
                $field->value = $changelog_file;
                $wrapper->add($field);
            }

            if (!$has_release_notes && !$has_tagged_log && !$has_changelog_file) {

                $this->getLastCommits($info, $http, $latest_commits);
                $has_latest_commits = $latest_commits != $latest_commits_default;

                $field = $this->modules->get('InputfieldMarkup');
                $field->name = 'commit-log';
                $field->label = $this->data['fallbackCommitHistory'] . ' ' . __("Most Recent Commits");
                if (!$has_latest_commits) {
                    $field->notes = __('Please ask the author to add support for one of the above options, as this list is simply the most recent Git commit message log. Adding and maintaining a ```CHANGELOG.md``` file is a step-up. Tagging git commits at each new version is better still, as it allows automatic diffing between versions. If on Github, using the Releases feature is a nice step up.');
                }
                $field->value = "<div class='release-notes'>$latest_commits</div>";
                $wrapper->add($field);
            }

            if ($this->config->debug) {
                $wrapper->notes = __("Github API reads remaining: ") . $this->github_remaining_reads['remaining'] .'/'. $this->github_remaining_reads['limit'] . '. ' .
                    __('Resets at ') .strftime('%F %T', $this->github_remaining_reads['reset']);
            }

            $return_info->children->insertAfter($wrapper, $children[0]);
        });



        /**
         * Display README and CHANGELOG sections on all module information pages, if these files exist in the
         * installation. This allows access to a level of help for modules that wasn't there before.
         */
        $this->addHookAfter("ProcessModule::executeEdit", function($event) {
            $info         = null;
            $module_class = '';
            $append_info  = false;

            if (isset($_POST['name'])) {
                $module_class = $_POST['name'];
            } elseif (isset($_GET['name'])) {
                $module_class = $_GET['name'];
            }
            $module_class = $this->sanitizer->name($module_class);
            $info = $this->modules->getModuleInfoVerbose($module_class);


            $outer_wrapper = new InputfieldWrapper();
            $wrapper = $this->modules->get('InputfieldFieldset');
            $wrapper->name  = 'changes-wrapper';
            $wrapper->label = __("Support Files");
            $wrapper->icon  = 'file-text-o';
            $wrapper->collapsed = $this->data['openSettings'] ? Inputfield::collapsedNo : Inputfield::collapsedYes;

            $dir = dirname(realpath($info['file']));

            $append_info |= $this->addSupportFiles('readme',    'book',          $wrapper, $dir.DIRECTORY_SEPARATOR."[Rr][Ee][Aa][Dd][Mm][Ee]*");
            $append_info |= $this->addSupportFiles('changelog', 'tags',          $wrapper, $dir.DIRECTORY_SEPARATOR."[Cc][Hh][Aa][Nn][Gg][Ee][Ll][Oo][Gg]*");
            $append_info |= $this->addSupportFiles('readme',    'balance-scale', $wrapper, $dir.DIRECTORY_SEPARATOR."[Ll][Ii][Cc][Ee][Nn][SsCc][Ee]*");

            if ($append_info) {
                $outer_wrapper->add($wrapper);
                $module_page   = $event->return;
                $event->return = $outer_wrapper->render() . $module_page;
            }
        });
    }


    /**
     * Searches for all files matching the given glob and attempts to read and format the contents of any
     * matches. These are added to the given wrapper.
     */
    protected function addSupportFiles($section, $icon, &$wrapper, $glob_regex) {
        $append_info = false;
        $files = glob($glob_regex);
        foreach ($files as $filename) {
            $content = $this->getFormattedTextFromFile($filename, $formatting_notes);
            if (!$content) continue;
            $basename = basename($filename);
            if (!$this->config->debug) $formatting_notes = '';
            $wrapper->add(self::wrapValueInField($section, $content, $basename, $icon, $formatting_notes));
            $append_info = true;
        }
        return $append_info;
    }



    /**
     * Returns a formatter for the given file extension (if possible)
     */
    static function getFormatterForFiletype($ext, &$formatter_info) {
        $ext = strtolower($ext);
        if (empty($ext)) $ext = 'txt';
        $formatter_info = @self::$formatters[$ext];
        $formatter      = null; // null => no load tried. false => load tried and failed.
        if ($formatter_info) {
            $formatter = @$formatter_info['instance'];
            if (null === $formatter) {
                if (is_string($formatter_info['use']) && !empty($formatter_info['use'])) {
                    $formatter = wire('modules')->get($formatter_info['use']);
                }
                self::$formatters[$ext]['instance'] = ($formatter) ? $formatter: false;
            }
        }
        return $formatter;
    }


    /**
     * Given a filename, tries to read and format the content with an appropriate textformatter.
     */
    public function getFormattedTextFromFile($filename, &$transformation_applied) {
        $transformation_applied = __('None');
        if (!is_file($filename) || !is_readable($filename)) return false;
        // Which extension is the file using?
        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        if (empty($ext)) $ext = 'txt';
        $content = file_get_contents($filename);
        if (false !== $content && !empty(trim($content))) {
            return $this->formatTextOfType($ext, $content, $transformation_applied);
        }
        return false;
    }


    /**
     * UTF-8 wordwrapping function.
     *
     * Source: http://php.net/manual/en/function.wordwrap.php#107570
     * minor edit to correct variable $search name in else clause.
     */
    protected function utf8_wordwrap($string, $break="\n", $cut=false) {
        $width = $this->wordWrapColumn;
        if($cut) {
            // Match anything 1 to $width chars long followed by whitespace or EOS,
            // otherwise match anything $width chars long
            $search  = '/(.{1,'.$width.'})(?:\s|$)|(.{'.$width.'})/uS';
            $replace = '$1$2'.$break;
        } else {
            // Anchor the beginning of the pattern with a lookahead
            // to avoid crazy backtracking when words are longer than $width
            $search  = '/(?=\s)(.{1,'.$width.'})(?:\s|$)/uS';
            $replace = '$1'.$break;
        }
        return preg_replace($search, $replace, $string);
    }




    /**
     * Tries to apply an appropriate textformatter to a given content string.
     * If no suitable external formatter is available, it will be passed through an internal 'verbatim' formatter.
     *
     * It also records which formatter was applied.
     */
    protected function formatTextOfType($ext, $unsafe_content, &$transformation_applied) {
        $transforms = [];
        $reason     = '';
        $formatter  = self::getFormatterForFiletype($ext, $formatter_info);
        if ($formatter) {
            /**
             * Display using formatter. Need to prevent possible XSS vectors here so it is all escaped...
             */
            $formatter->formatValue(new \ProcessWire\Page(), new \ProcessWire\Field(), $unsafe_content);
            $transforms[] = $formatter_info['type'];
            $content = $this->sanitizeString($unsafe_content);
            $transforms[] = 'HTML Purifier';
        } else {
            /**
             * Display verbatim. Need to prevent possible XSS vectors here so it is all escaped...
             *
             * We call html_entity_decode() to convert entities to their UTF-8 character versions when possible,
             * before then passing it through htmlspecialchars() to encode angle brackets and quotes. If this is not
             * done then some characters with diacritic marks remain as html entities in the code.
             */
            $content = html_entity_decode($unsafe_content, ENT_COMPAT, 'UTF-8');
            $transforms[] = 'HTML Entity Decode';
            $content = htmlspecialchars($content, ENT_COMPAT, 'UTF-8');
            $transforms[] = 'HTML Special Character Encode';
            $content = $this->utf8_wordwrap($content);
            $transforms[] = 'UTF8 Wordwrap';
            $content = "<pre>$content</pre>";

            if ($formatter_info) {
                /**
                 * formatter_info existing shows we had a textformatter entry for this filetype but couldn't load it
                 */
                $reason = sprintf(
                    __(" because the %s formatter [%s] is not available"),
                    $formatter_info['type'],
                    $formatter_info['use']
                );
            }
        }
        $transforms = implode(' &rarr; ', $transforms);
        $transformation_applied = sprintf(__("Prepared text (type '%s') using the ```%s``` format chain%s."), $ext, $transforms, $reason);
        return $content;
    }



    /**
     * Wraps the given low and high version strings with a span that can be styled.
     *
     * When applied to the current and latest version numbers, allows easy visual identification of applicable changes.
     */
    protected function highlightChangelogBetweenVersions($log, $low_version, $high_version=false, $str_low=false, $str_high=false) {
        if (false === $str_high) $str_high = __("Latest ");
        if (false === $str_low)  $str_low  = __("Current ");
        if (false !== $high_version) {
            $log = str_replace($high_version, "<span class='high-version'><span class='annotation'>$str_high</span>$high_version</span>", $log);
        }
        $log = str_replace($low_version,  "<span class='low-version'><span class='annotation'>$str_low</span>$low_version</span>", $log);

        return $log;
    }


    protected function highlightBreakingChanges($changes, &$flag) {
        $breaking_changes = explode(',', $this->breakingPhrases);
        foreach ($breaking_changes as $bp) {
            $bp = trim($bp);
            $pos = stripos($changes, $bp);
            if (false !== $pos) {
                $flag |= true;
                $changes = str_ireplace($bp,  "<span class='breaking-change'>$bp</span>", $changes);
            }
        }

        return $changes;
    }


    protected function insertMarkerForVersion($version, $changelog) {
        // Slice off, and preserve any h1 element.
        $top_knife = '</h1>';
        $pre       = '';
        $parts     = explode($top_knife, $changelog);
        if (count($parts) > 1) {
            $pre = array_shift($parts).$top_knife;
            $changelog = implode($top_knife, $parts);
        }


        // Divide the remaining document into the new and old portions. Classes on the divs are used to control
        // the display of the result.
        $version   = preg_quote($version);
        $entries   = preg_split("~(<h[2-3][^>]*>$version)~i", $changelog, -1, PREG_SPLIT_DELIM_CAPTURE);
        $newstuff  = array_shift($entries);
        $oldstuff  = implode('', $entries);

        $new_class = 'new-changes';
        $has_breaking_change = false;
        $newstuff = $this->highlightBreakingChanges($newstuff, $has_breaking_change);
        if ($has_breaking_change) {
            $new_class .= ' breaking-change';
        }

        // Rebuild the changelog with the divisions in place...
        $grow_label = __('Show More');
        $all_label  = __('Show All (can lead to a long page)');
        $changelog = "$pre<div class='$new_class'>$newstuff</div><div class='expansion-wrapper'><div class='old-changes expand'>$oldstuff</div><p><a class='cursor-pointer grow-height'>$grow_label</a></p></div>";
        return $changelog;
    }



    /**
     * Builds a markup input field to contain the given information.
     */
    static function wrapValueInField($name, $value, $label, $icon, $notes) {
        $value = "<div class='release-notes'>$value</div>";
        $f = wire('modules')->get('InputfieldMarkup');
        $f->name = $name;
        $f->label = $label;
        if (!empty(trim($notes))) $f->notes = $notes;
        $f->value = $value;
        $f->collapsed = Inputfield::collapsedYes;
        $f->icon = $icon;
        return $f;
    }


    /**
     *
     */
    public function init() {
        parent::init();
    }



    /**
     *
     */
    static public function getModuleConfigInputfields(array $data) {

        $modules   = wire('modules');
        $fields    = new InputfieldWrapper();
        $defaults  = self::getDefaultConfig();
        $data      = array_merge($defaults, $data);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'fallbackCommitHistory');
        $f->attr('inputType', 'number');
        $f->attr('type', 'number');
        $f->label = __('Number of Commits To Show');
        $f->description = __('If there are no Release Notes, Tagged Commits or Changelog, how many lines of commit history should be shown?');
        $f->max = 30;
        $f->min = 2;
        $f->notes = __("Minimum 2, Maximum 30");
        $f->attr('value', $data['fallbackCommitHistory']);
        $fields->add($f);

        $f = $modules->get('InputfieldText');
        $f->attr('name', 'breakingPhrases');
        $f->label = __('Breaking Changes');
        $f->description = __('A comma-separated list of phrases that indicate a breaking-change may be present.');
        $f->notes = __("The search for these phrases in changes will be case-insensitive.");
        $f->attr('value', $data['breakingPhrases']);
        $fields->add($f);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'wordWrapColumn');
        $f->attr('inputType', 'number');
        $f->attr('type', 'number');
        $f->label = __('Wrap text files at which column position?');
        $f->max = 300;
        $f->min = 40;
        $f->notes = __("Minimum 40, Maximum 300");
        $f->attr('value', $data['wordWrapColumn']);
        $fields->add($f);

        $f = $modules->get('InputfieldRadios');
        $f->attr('name', 'openSettings');
        $f->label = __('Open the "Support Files" section of the module information page automatically');
        $f->addOption(0, __('No, keep it collapsed.'));
        $f->addOption(1, __('Yes, show me the support files.'));
        $f->attr('value', $data['openSettings']);
        $fields->add($f);


        return $fields;
    }


    /**
     * Installs needed resources.
     */
    public function ___install() {
    }

}
